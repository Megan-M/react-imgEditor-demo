{"version":3,"sources":["randomImage.js","editor.js","App.js","serviceWorker.js","index.js"],"names":["RandomImage","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","loading","divStyle","filter","bright","contrast","invert","sat","hue","width","height","react_default","a","createElement","class","style","alt","src","url","Component","unsplash","Unsplash","applicationId","secret","Editor","imgURL","imgW","imgH","updateState","bind","assertThisInitialized","resetVals","getNewPhoto","_this2","photos","getRandomPhoto","then","toJson","json","imgUrl","urls","regular","setState","event","obj","target","name","value","_this3","placeholder","onChange","size","type","min","max","onClick","index_es","icon","faRedo","randomImage","Header","App","src_editor","Boolean","window","location","hostname","match","ReactDOM","render","react_router_dom","basename","process","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0798ce39.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './editor.css';\r\n\r\n\r\nclass RandomImage extends Component {\r\n    \r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        loading: true,\r\n      };\r\n    }\r\n\r\n    \r\n    render(){\r\n        var divStyle = {\r\n            filter: 'brightness('+this.props.bright+'%) contrast('+this.props.contrast+'%) invert('+this.props.invert+'%) saturate('+this.props.sat+'%) hue-rotate('+this.props.hue+'deg)',\r\n            width: this.props.width+'px',\r\n            height: this.props.height+'px',\r\n        }\r\n        \r\n        return (\r\n            <div class=\"imageBox\" style={divStyle}>\r\n                <img\r\n                    class=\"centeredImg\"\r\n                    alt=\"random - from Unsplash\"\r\n                    src={this.props.url} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RandomImage;","import React, {Component} from 'react';\r\nimport './editor.css';\r\nimport RandomImage from './randomImage';\r\nimport Unsplash, { toJson } from 'unsplash-js';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faRedo } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst unsplash = new Unsplash({\r\n  applicationId: \"feff453b2f82f0903d7defe57722b599181dec6f4ef3ae8b3a833d6c429446db\",\r\n  secret: \"de927e89381d2eddd10aca02a5b0e2e549c613c47a733574c72317795faeda40\"\r\n});\r\n\r\n\r\nclass Editor extends Component {\r\n    \r\n     constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            \r\n            imgURL:'https://source.unsplash.com/random/500x500',\r\n            imgW:500,\r\n            imgH:500,\r\n            bright:100,\r\n            contrast:100,\r\n            invert:0,\r\n            sat:100,\r\n            hue:0,\r\n        }; \r\n         \r\n         this.updateState = this.updateState.bind(this);\r\n         this.resetVals = this.resetVals.bind(this);\r\n         this.getNewPhoto = this.getNewPhoto.bind(this);\r\n    }\r\n    \r\n    \r\n    getNewPhoto(){\r\n        unsplash.photos.getRandomPhoto()\r\n          .then(toJson)\r\n          .then(json => {\r\n            var imgUrl = json.urls.regular;\r\n            this.setState({imgURL: imgUrl});\r\n          });\r\n    }\r\n\r\n    updateState(event){\r\n        let obj = {};\r\n        var state = event.target.name;\r\n        obj[state] = event.target.value;\r\n        this.setState(obj);\r\n    }\r\n    \r\n    resetVals(){\r\n        this.setState({ bright:100,\r\n            contrast:100,\r\n            invert:0,\r\n            sat:100,\r\n            hue:0,})\r\n    }\r\n    \r\n\r\n    \r\n    render() {\r\n         return (\r\n             <div class='editor'>\r\n                 <div class='options'>\r\n                  \r\n                            <legend> Width x Height </legend>\r\n                        \r\n                                <input name='imgW' placeholder={this.state.imgW} onChange={this.updateState} size='5' />\r\n                       \r\n                                <input name='imgH' placeholder={this.state.imgH} onChange={this.updateState} size='5' />\r\n                   \r\n                            <legend> Brightness </legend>\r\n                            <input\r\n                                name='bright'\r\n                                type=\"range\" \r\n                                min=\"0\" max=\"200\" \r\n                                value={this.state.bright} \r\n                                onChange={this.updateState}/>\r\n                 \r\n                            <legend> Contrast </legend>\r\n                            <input \r\n                                name='contrast'\r\n                                type=\"range\" \r\n                                min=\"0\" max=\"200\" \r\n                                value={this.state.contrast} \r\n                                onChange={this.updateState}/>\r\n                             \r\n                            <legend> Invert </legend>\r\n                            <input \r\n                                name='invert'\r\n                                type=\"range\" \r\n                                min=\"0\" max=\"100\" \r\n                                value={this.state.invert} \r\n                                onChange={this.updateState}/>\r\n                      \r\n                            <legend> Saturation </legend>\r\n                            <input \r\n                                name='sat'\r\n                                type=\"range\" \r\n                                min=\"0\" max=\"500\" \r\n                                value={this.state.sat} \r\n                                onChange={this.updateState}/>\r\n                      \r\n                            <legend> Hue </legend>\r\n                            <input \r\n                                name='hue'\r\n                                type=\"range\" \r\n                                min=\"0\" max=\"360\" \r\n                                value={this.state.hue} \r\n                                onChange={this.updateState}/>\r\n                     \r\n                            <button class='resetBttn' onClick={this.resetVals}>Reset</button>\r\n                       \r\n                            <button class='newImg' onClick={() => this.getNewPhoto()}>\r\n                  <FontAwesomeIcon icon={faRedo} />\r\n                </button>\r\n                     \r\n                 </div>\r\n                 <div  class='mainImg'>\r\n                     <RandomImage\r\n                        url={this.state.imgURL}\r\n                        height={this.state.imgH}\r\n                        width={this.state.imgW}\r\n                        bright={this.state.bright}\r\n                        contrast={this.state.contrast}\r\n                        invert={this.state.invert}\r\n                        sat={this.state.sat}\r\n                        hue={this.state.hue}/>\r\n                </div>\r\n             </div>\r\n\r\n          );\r\n    }\r\n    \r\n    \r\n}\r\n\r\nexport default Editor","import React from 'react';\nimport './App.css';\nimport Editor from './editor';\n\nfunction Header() {\n    return (\n        <div class=\"header\">\n            <span class='logo'>React Image Editor Demo</span>\n        </div>\n    )\n}\n\nfunction App() {\n    \n  return (\n      <div class='App'>\n        <Header />\n        <Editor />\n      </div>\n   \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(<Router basename={process.env.PUBLIC_URL}>< App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}